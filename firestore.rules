rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      // Allow users to read and write their own data when authenticated
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Validate required fields on write operations
      allow create: if request.auth != null 
                   && request.auth.uid == userId
                   && validateUserData(request.resource.data);
      
      allow update: if request.auth != null 
                   && request.auth.uid == userId
                   && validateUserData(request.resource.data)
                   && resource.data.uid == request.auth.uid; // Prevent UID changes
    }
    
    // Health check collection - allow read access for system monitoring
    match /_health/{document} {
      allow read: if true; // Allow anonymous access for health checks
      allow write: if false; // Prevent writes to health check collection
    }
    
    // Helper function to validate user data structure
    function validateUserData(data) {
      return data.keys().hasAll(['uid', 'role', 'displayName', 'createdAt'])
             && data.uid is string
             && data.role in ['patient', 'caregiver', 'doctor', 'pharmacist']
             && data.displayName is string
             && data.createdAt is timestamp
             && (data.keys().hasAny(['email', 'phoneNumber'])) // At least one contact method
             && (!data.keys().hasAll(['email']) || data.email is string) // If email exists, must be string
             && (!data.keys().hasAll(['phoneNumber']) || data.phoneNumber is string); // If phone exists, must be string
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 