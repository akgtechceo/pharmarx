import { initializeApp } from 'firebase/app';
import { getAuth, connectAuthEmulator } from 'firebase/auth';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';

// Firebase configuration with environment variable support
// These values are generated by Terraform and populated via CI/CD or local setup
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "demo-api-key",
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "pharmarx-dev.firebaseapp.com",
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "pharmarx-dev",
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "pharmarx-dev.appspot.com",
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "123456789",
  appId: import.meta.env.VITE_FIREBASE_APP_ID || "1:123456789:web:abcdef123456"
};

// Environment detection
const isDevelopment = import.meta.env.DEV || 
                     import.meta.env.MODE === 'development' ||
                     (typeof window !== 'undefined' && window.location.hostname === 'localhost');

const isEmulator = import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true' || 
                  (isDevelopment && firebaseConfig.projectId.includes('dev'));

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize Auth
export const auth = getAuth(app);

// Initialize Firestore
export const db = getFirestore(app);

// Connect to emulators in development
if (isEmulator) {
  try {
    // Auth emulator
    if (!auth.config.emulator) {
      const authEmulatorUrl = import.meta.env.VITE_FIREBASE_AUTH_EMULATOR_URL || 'http://localhost:9099';
      connectAuthEmulator(auth, authEmulatorUrl);
      console.log('üîê Connected to Firebase Auth emulator');
    }
    
    // Firestore emulator
    if (!db._delegate._databaseId.projectId.includes('emulator')) {
      const firestoreHost = import.meta.env.VITE_FIREBASE_FIRESTORE_EMULATOR_HOST || 'localhost';
      const firestorePort = parseInt(import.meta.env.VITE_FIREBASE_FIRESTORE_EMULATOR_PORT || '8080');
      connectFirestoreEmulator(db, firestoreHost, firestorePort);
      console.log('üî• Connected to Firestore emulator');
    }
  } catch (error) {
    // Emulators may already be connected
    console.log('Firebase emulators connection info:', error);
  }
}

// Configuration validation in development
if (isDevelopment) {
  console.log('üîß Firebase Configuration:', {
    projectId: firebaseConfig.projectId,
    authDomain: firebaseConfig.authDomain,
    isEmulator,
    environment: import.meta.env.MODE
  });
  
  // Warn if using demo configuration
  if (firebaseConfig.apiKey === 'demo-api-key') {
    console.warn('‚ö†Ô∏è  Using demo Firebase configuration. Run the setup script to configure proper credentials.');
  }
}

// Export app and configuration
export { app, firebaseConfig, isDevelopment, isEmulator };
export default app; 